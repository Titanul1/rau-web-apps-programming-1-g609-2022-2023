# -*- coding: utf-8 -*-
"""signup_sampel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EUuoQ0PxtFeOlA2-p9KTPgoKbieIcutH
"""

app_users = []

user = []

request_body = {
    "name": "A B",
    "email": "a@b.c",
    "password": "yhreA31!_-",
    "second_password": "yhreA31!_-"
}

def validate_email(email):
  email = email.lower()
  email = email.replace(" ", "")

  email_parts = email.split("@")

  if len(email_parts) > 2:
    raise ValueError("Email is not formatted correctly. Please try again.")
  
  second_part = email_parts[1]

  email_ending = second_part.split(".")

  if len(email_ending) > 2:
    raise ValueError("Email is not formatted correctly. Please try again.")

  return email

validate_email(request_body["email"])

validate_email("  a@b@c.com  ")

validate_email("  AsBB @  b.  com   ")

special_characters = ["*", "?", "!", "#", "&", "=", "(", ")", "_", "-"]

def validate_password(password): 
  # eliminate spaces
  present_spaces = password.find(" ")
  if present_spaces > -1:
    raise ValueError("Invalid password. Password contains spaces.")
  
  # validate length
  if len(password) < 8:
    raise ValueError("Invalid password. Password too short. Minimum 8 characters required.")
  
  # validate special characters
  present_special = 0
  present_digits = 0
  present_upper = 0
  for character in password:
    if character in special_characters:
      present_special += 1 # present_special_characters = present_special_characters + 1
    
    if character.isdigit():
      present_digits += 1

    if character.isupper():
      present_upper += 1

    if present_special and present_digits and present_upper:
      break

  if present_special == 0:
    raise ValueError("Invalid password. Special characters are missing.")

  if present_digits == 0:
    raise ValueError("Invalid password. Missing at least one digit.")

  if present_upper == 0:
    raise ValueError("Invalid password. Missing at least one upper case letter.")

  return password

validate_password(request_body["password"])

validate_password("  A s ss asdr31 ")

validate_password("Ajd!!@@")

def save_in_memory(user, app_users):
  user["email"] = validate_email(user["email"])
  user["password"] = validate_password(user["password"])
  if user["password"] != user["second_password"]: 
    raise ValueError("Password mismatch. Try again using the same password.")

  if not is_unique(user, app_users):
    raise ValueError("User is not unique.")
  
  app_users.append(user)

  return app_users

def is_unique(user, all_users):
  for existing_user in all_users:
    if existing_user["email"] == user["email"]:
      return False 
  
  return True

all_users = save_in_memory(request_body, app_users)
print(all_users)

all_users = save_in_memory(request_body, app_users)
print(all_users)

import json 

def save_to_file(user, filename):
  user["email"] = validate_email(user["email"])
  user["password"] = validate_password(user["password"])
  if user["password"] != user["second_password"]: 
    raise ValueError("Password mismatch. Try again using the same password.")

  with open(filename, "r") as f:
    users = f.readlines()
    existing_users = []
    for existing_user in users:
      existing_user = json.loads(existing_user)
      existing_users.append(existing_user)

    if not is_unique(user, existing_users):
      raise ValueError("User not unique")

  with open(filename, "w+") as f:
    user_json = json.dumps(user)
    f.write(user_json)

save_to_file(request_body, "users_database.txt")

